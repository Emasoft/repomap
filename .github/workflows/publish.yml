name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 20  # Increased timeout
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
          
      # Split the dependencies installation into multiple steps to avoid timeout issues
      - name: Install pip and testing tools
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov coverage build twine bumpversion ruff mypy
        timeout-minutes: 5
          
      - name: Install required packages
        run: |
          pip install -r requirements.txt
        timeout-minutes: 10
        
      - name: Install package in development mode
        run: |
          pip install -e .
        timeout-minutes: 3
          
      - name: Run tests and coverage
        run: |
          python -m pytest tests/ --cov=repomap
          coverage report --fail-under=80
          
      - name: Lint with ruff
        run: |
          ruff check --ignore E203,E402,E501,E266,W505,F841,F842,F401,W293,I001,UP015,C901,W291 --fix .
          
      - name: Type check with mypy
        run: |
          mypy --no-warn-unused-ignores --no-warn-unused-configs --no-warn-return-any --no-warn-unreachable .
          
      - name: Bump version (if workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          bumpversion ${{ github.event.inputs.release_type }}
          
      - name: Extract version from release tag (if release)
        if: github.event_name == 'release'
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version: $VERSION"
          
      - name: Update version in files (if release)
        if: github.event_name == 'release'
        run: |
          # Update version in __init__.py
          sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" repomap/__init__.py
          
          # Update version in pyproject.toml
          sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
          
          # Update version in setup.py if it exists
          if [ -f setup.py ]; then
            sed -i "s/version='.*',/version='$VERSION',/" setup.py
          fi
          
      - name: Build package
        run: |
          python -m build
          
      - name: Publish to PyPI
        if: success()
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/*
          
      - name: Push changes (if workflow_dispatch)
        if: github.event_name == 'workflow_dispatch' && success()
        run: |
          git push origin HEAD:release --tags